create function get_clients()
returns table(id integer, imie varchar, nazwisko varchar, numer_telefonu char) as $$
declare
	client_exists boolean;
	c_client cursor for select * from klienci;
	r_client record;
begin
	select exists(select 1 from klienci) into client_exists;
	if not client_exists then
		raise exception 'W bazie nie ma zadnego klienta';
	end if;
	open c_client;
	loop
		fetch c_client into r_client;
		exit when not found;
		id := r_client.id;
		imie := r_client.imie;
		nazwisko := r_client.nazwisko;
		numer_telefonu := r_client.nr_telefonu;
		return next;
	end loop;
	close c_client;
end;
$$ language plpgsql;


create function get_employees()
returns table(id integer, id_zespolu integer, imie varchar, nazwisko varchar) as $$
declare
	employee_exists boolean;
	c_employee cursor for select * from pracownicy;
	r_employee record;
begin
	select exists(select 1 from pracownicy) into employee_exists;
	if not employee_exists then
		raise exception 'W bazie nie ma zadnego pracownika';
	end if;
	open c_employee;
	loop
		fetch c_employee into r_employee;
		exit when not found;
		id := r_employee.id;
		id_zespolu := r_employee.id_zespolu;
		imie := r_employee.imie;
		nazwisko := r_employee.nazwisko;
		return next;
	end loop;
	close c_employee;
end;
$$ language plpgsql;


create function get_history()
returns table(id integer, id_zgloszenia integer, data date, opis text) as $$
declare
	history_exists boolean;
	c_history cursor for select * from historie_dzialan;
	r_history record;
begin
	select exists(select 1 from historie_dzialan) into history_exists;
	if not history_exists then
		raise exception 'W bazie nie ma zadnej historii';
	end if;
	open c_history;
	loop
		fetch c_history into r_history;
		exit when not found;
		id := r_history.id;
		id_zgloszenia := r_history.id_zgloszenia;
		data := r_history.data;
		opis := r_history.opis;
		return next;
	end loop;
	close c_history;
end;
$$ language plpgsql;


create function get_teams()
returns table(id integer, specjalizacja VARCHAR) as $$
declare
	teams_exists boolean;
	c_teams cursor for select * from zespoly;
	r_team record;
begin
	select exists(select 1 from zespoly) into teams_exists;
	if not teams_exists then
		raise exception 'W bazie nie ma zadnego zespolu';
	end if;
	open c_teams;
	loop
		fetch c_teams into r_team;
		exit when not found;
		id := r_team.id;
		specjalizacja := r_team.specjalizacja;
		return next;
	end loop;
	close c_teams;
end;
$$ language plpgsql;


create function get_equipment()
returns table(id integer, id_klienta integer, rodzaj varchar) as $$
declare
	equipment_exists boolean;
	c_equipment cursor for select * from sprzety;
	r_equipment record;
begin
	select exists(select 1 from sprzety) into equipment_exists;
	if not equipment_exists then
		raise exception 'W bazie nie ma zadnego sprzetu';
	end if;
	open c_equipment;
	loop
		fetch c_equipment into r_equipment;
		exit when not found;
		id := r_equipment.id;
		id_klienta := r_equipment.id_klienta;
		rodzaj := r_equipment.rodzaj;
		return next;
	end loop;
	close c_equipment;
end;
$$ language plpgsql;


create function get_reports()
returns table(id integer, id_sprzetu integer, id_pracownika integer, status varchar, data_przyjecia date, data_zakonczenia date, usterka text) as $$
declare
	reports_exists boolean;
	c_reports cursor for select * from zgloszenia;
	r_report record;
begin
	select exists(select 1 from zgloszenia) into reports_exists;
	if not reports_exists then
		raise exception 'W bazie nie ma zadnego zgloszenia';
	end if;
	open c_reports;
	loop
		fetch c_reports into r_report;
		exit when not found;
		id := r_report.id;
		id_sprzetu := r_report.id_sprzetu;
		id_pracownika := r_report.id_pracownika;
		status := r_report.status;
		data_przyjecia := r_report.data_przyjecia;
		data_zakonczenia := r_report.data_zakonczenia;
		usterka := r_report.usterka;
		return next;
	end loop;
	close c_reports;
end;
$$ language plpgsql;



CREATE OR REPLACE FUNCTION logowanie(nazwa_uzytkownika VARCHAR, haslo_uzytkownika CHAR(64))
RETURNS TABLE(nazwa VARCHAR, haslo CHAR(64), id_pracownika INTEGER, rola VARCHAR) as $$
begin
	RETURN QUERY SELECT k.nazwa, k.haslo, k.id_pracownika, k.rola FROM konta k WHERE k.nazwa = logowanie.nazwa_uzytkownika AND k.haslo = logowanie.haslo_uzytkownika;
end;
$$ language plpgsql;


CREATE OR REPLACE FUNCTION logowanie(nazwa_uzytkownika VARCHAR, haslo CHAR(64))
RETURNS TABLE(nazwa VARCHAR, rola VARCHAR) as $$
declare
	oid_uzytkownika oid;
	grupa VARCHAR;
begin
	oid_uzytkownika := (SELECT oid FROM pg_roles WHERE rolname = nazwa_uzytkownika AND rolpassword = haslo);
	if oid_uzytkownika IS NULL THEN
		return;
	end if;

	grupa := (SELECT groname FROM pg_group WHERE oid_uzytkownika = ANY(grolist));

	if grupa = 'admins' then
		RETURN query SELECT nazwa::VARCHAR, 'admin'::VARCHAR;
	elsif grupa = 'pracownicy' then
		RETURN query SELECT nazwa::VARCHAR, 'pracownik'::VARCHAR;
	else
		RETURN;
	end if;
end;
$$ language plpgsql;


CREATE OR REPLACE FUNCTION znajdz_grupe(nazwa_uzytkownika VARCHAR)
RETURNS VARCHAR as $$
declare
	oid_uzytkownika oid;
	grupa VARCHAR;
begin
	oid_uzytkownika := (SELECT oid FROM pg_roles WHERE rolname = nazwa_uzytkownika AND rolpassword = haslo);
	if oid_uzytkownika IS NULL THEN
		return 'null';
	end if;
	grupa := (SELECT groname FROM pg_group WHERE oid_uzytkownika = ANY(grolist));
	if grupa = 'admins' then
		RETURN 'admin';
	elsif grupa = 'pracownicy' then
		RETURN 'pracownik';
	else
		RETURN 'null';
	end if;
end;
$$ language plpgsql;



CREATE OR REPLACE FUNCTION znajdz_widoki_dostepne_dla_pracownikow() 
RETURNS TABLE(tablename information_schema.sql_identifier) AS $$
BEGIN
	RETURN QUERY (SELECT DISTINCT table_name
FROM information_schema.role_table_grants 
WHERE grantee='pracownicy' AND table_name LIKE '%widok');
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION znajdz_tabele_dostepne_dla_pracownikow() 
RETURNS TABLE(tablename information_schema.sql_identifier) AS $$
BEGIN
	RETURN QUERY (SELECT DISTINCT table_name
FROM information_schema.role_table_grants 
WHERE grantee='pracownicy' AND table_name NOT LIKE '%widok');
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION znajdz_tabele_dostepne_dla_admina() 
RETURNS TABLE(tablename information_schema.sql_identifier) AS $$
BEGIN
	RETURN QUERY (SELECT DISTINCT table_name
FROM information_schema.role_table_grants 
WHERE grantee='admins' AND table_name NOT LIKE '%widok');
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION znajdz_widoki_dostepne_dla_adminow() 
RETURNS TABLE(tablename information_schema.sql_identifier) AS $$
BEGIN
	RETURN QUERY (SELECT DISTINCT table_name
FROM information_schema.role_table_grants 
WHERE grantee='admins' AND table_name LIKE '%widok');
END;
$$ LANGUAGE plpgsql;



CREATE OR REPLACE FUNCTION sprawdz_dostep(grupa VARCHAR, tabela VARCHAR) 
RETURNS BOOLEAN AS $$

BEGIN
	RETURN (SELECT EXISTS (SELECT table_name 
FROM information_schema.role_table_grants 
WHERE grantee = grupa AND table_name = tabela));
END;
$$ LANGUAGE plpgsql;