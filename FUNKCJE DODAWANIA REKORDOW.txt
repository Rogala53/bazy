CREATE OR REPLACE PROCEDURE dodaj_pracownicy(imie VARCHAR, nazwisko VARCHAR, id_zespolu INTEGER) language plpgsql as $$
declare
	pracownik_istnieje boolean;
	zespol_istnieje boolean;
begin
	pracownik_istnieje := EXISTS(SELECT 1 FROM pracownicy p WHERE p.imie = dodaj_pracownicy.imie AND p.nazwisko = dodaj_pracownicy.nazwisko);
	if pracownik_istnieje then
		raise exception 'Taki pracownik juz istnieje';
	end if;
	zespol_istnieje := EXISTS(SELECT 1 FROM zespoly z WHERE z.id = dodaj_pracownicy.id_zespolu);
	if not zespol_istnieje then
		raise exception 'Zespół o tym id nie istnieje';
	end if;
	INSERT INTO pracownicy (imie, nazwisko, id_zespolu) VALUES (dodaj_pracownicy.imie, dodaj_pracownicy.nazwisko, dodaj_pracownicy.id_zespolu);
	raise notice 'nowy pracownik został dodany';
end $$;

CREATE OR REPLACE PROCEDURE dodaj_zespoly(specjalizacja VARCHAR) language plpgsql as $$
begin
	if specjalizacja IS NULL then
		raise exception 'Specjalizacja nie moze byc pusta';
	end if;
	INSERT INTO zespoly (specjalizacja) VALUES (specjalizacja);
	raise notice 'nowy zespol zostal dodany';
end $$;



CREATE OR REPLACE PROCEDURE dodaj_klienci(imie VARCHAR, nazwisko VARCHAR, telefon CHAR) language plpgsql as $$
begin
	if telefon IS NULL OR telefon = '' then
		raise exception 'Telefon nie moze byc pusty';
	end if;
	if not telefon ~ '^[0-9]{9}$' then
		raise exception 'Numer telefonu musi skladac sie z samych cyfr';
	end if;

	INSERT INTO klienci (imie, nazwisko, telefon) VALUES (imie, nazwisko, telefon);
	raise notice 'Udało się dodać nowego klienta';
end $$;




CREATE OR REPLACE PROCEDURE dodaj_sprzety(id_klienta INTEGER, opis TEXT, odbior TEXT DEFAULT 'nie') language plpgsql as $$
declare
	klient_istnieje BOOLEAN;
begin
	klient_istnieje := (EXISTS (SELECT 1 FROM klienci WHERE dodaj_sprzety.id_klienta = klienci.id));
	if not klient_istnieje  then
		raise exception 'Klient o tym id nie istnieje';
	end if;
	if opis = '' then
		raise exception 'Opis nie może być pusty';
	end if;
	if TRIM(odbior) NOT IN ('nie', 'tak') then
		raise exception 'pole odbior ma inne wartosci niz powinno, otrzymano %', odbior;
	end if;
	INSERT INTO sprzety (id_klienta, opis, odbior) VALUES (id_klienta, opis, odbior);
	raise notice 'nowy sprzet zostal dodany';
end $$;


CREATE OR REPLACE PROCEDURE dodaj_dzialania(id_zgloszenia INTEGER, id_pracownika INTEGER, opis VARCHAR, data_dzialania DATE DEFAULT CURRENT_DATE)
language plpgsql as $$
declare
	zgloszenie_istnieje boolean;
	pracownik_istnieje boolean;
	data_rozpoczecia date;
begin
	if id_zgloszenia IS NULL OR data_dzialania IS NULL OR opis IS NULL then
		raise exception 'id_zgloszenia, data i opis nie moga byc puste';
	end if;
	zgloszenie_istnieje := EXISTS(SELECT 1 FROM zgloszenia WHERE id = id_zgloszenia);
	if not zgloszenie_istnieje then
		raise exception 'Zgloszenie o tym id nie istnieje';
	end if;
	pracownik_istnieje := EXISTS(SELECT 1 FROM pracownicy WHERE id = id_pracownika);
	if not pracownik_istnieje then
		raise exception 'Pracownik o tym id nie istnieje';
	end if;
	data_rozpoczecia := (SELECT data_przyjecia FROM zgloszenia WHERE id = id_zgloszenia);
	if data_rozpoczecia > data_dzialania then
		raise exception 'Data dzialania nie moze byc wczesniejsza niz data_rozpoczecia';
	end if;
	INSERT INTO dzialania (id_zgloszenia, id_pracownika, data, opis) VALUES (id_zgloszenia, id_pracownika, data_dzialania, opis);
	raise notice 'nowe działanie zostało dodane';
end $$;


CREATE OR REPLACE PROCEDURE dodaj_zgloszenia(id_sprzetu INTEGER, usterka VARCHAR,
 status VARCHAR DEFAULT 'przyjete', data_przyjecia DATE DEFAULT CURRENT_DATE) language plpgsql as $$
declare
	sprzet_istnieje boolean;
begin
	if id_sprzetu IS NULL OR
	usterka IS NULL then
		raise exception 'Wartosci nie moga byc puste';
	end if;
	sprzet_istnieje := EXISTS(SELECT 1 FROM sprzety WHERE id = id_sprzetu);
	if not sprzet_istnieje then
		raise exception 'Sprzet o takim id nie istnieje';
	end if;
	INSERT INTO zgloszenia (id_sprzetu, status, data_przyjecia, usterka)
	VALUES (id_sprzetu, status, data_przyjecia, usterka);
	raise notice 'nowe zgłoszenie zostało dodane';
end $$;